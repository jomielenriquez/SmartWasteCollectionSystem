@using SmartWasteCollectionSystem.Models
@using System.Security.Claims
@model EditScreenModel<Email>
@{
    ViewData["Title"] = "Email Screen";
}
@if (Model.ErrorMessages != null)
{
    <br />
    <div class="alert alert-danger d-flex align-items-center" role="alert">
        <i class="fa-solid fa-triangle-exclamation"></i>
        <div>
            @foreach (var error in Model.ErrorMessages)
            {
                <div>@error</div>
            }
        </div>
    </div>
}

<script src="https://cdn.ckeditor.com/ckeditor5/41.4.2/classic/ckeditor.js"></script>
<div class="card mb-3">
    <div class="card-header">Email</div>
    <div class="card-body">
        <Custom:Form id="Email"
                     submit-tag="Save"
                     controller="Email"
                     action="Save"
                     cancel-redirect="/Email/EmailListScreen"
                     display-submit="@(!(Model.Data.IsSent && Model.Data.EmailId != Guid.Empty && Model.ErrorMessages == null))">

            <Custom:TextBox id="EmailId"
                            label="EmailId"
                            type="text"
                            value="@Model.Data.EmailId"
                            is-hidden="true"
                            placeholder=""
                            is-disabled="@(Model.Data.IsSent && Model.Data.EmailId != Guid.Empty && Model.ErrorMessages == null)">
            </Custom:TextBox>
            
            <div class="SysCoreTextBoxDivClass mb-3 row">
                <label for="Recipients" class="form-label mt-0 RecipientsSysCoreTextBoxLabelClass col-sm-4 col-form-label">Recipients</label>
                <div class="col-sm-8">
                    <div class="mb-3">
                        <input type="text"
                               class="form-control"
                               id="Recipients"
                               name="Recipients"
                               asp-for="Data.Recipients"
                               placeholder="Selected emails will appear here"
                               disabled="@(Model.Data.IsSent && Model.Data.EmailId != Guid.Empty && Model.ErrorMessages == null)" />
                    </div>

                    @if(!(Model.Data.IsSent && Model.Data.EmailId != Guid.Empty && Model.ErrorMessages == null))
                    {
                        <div class="dropdown">
                            <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                Select Recipients
                            </button>
                            <ul class="dropdown-menu p-3" aria-labelledby="dropdownMenuButton" style="min-width: 300px;">
                                <li>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="selectAll">
                                        <label class="form-check-label fw-bold" for="selectAll">Select All</label>
                                    </div>
                                </li>
                                <li><hr class="dropdown-divider"></li>

                                @foreach(var user in Model.ListOfUsers)
                                {
                                    <li>
                                        <div class="form-check">
                                            <input class="form-check-input recipient" type="checkbox" value="@user.Email" id="@user.Email">
                                            <label class="form-check-label" for="@user.Email">@(user.FirstName + " " + user.LastName + " (" + user.Email + ")")</label>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            </div>

            <Custom:TextBox id="Title"
                            label="Title"
                            type="text"
                            value="@Model.Data.Title"
                            placeholder="Enter title"
                            is-disabled="@(Model.Data.IsSent && Model.Data.EmailId != Guid.Empty && Model.ErrorMessages == null)">
            </Custom:TextBox>

            <Custom:TextArea id="Message"
                             label="Message"
                             type="text"
                             value="@Model.Data.Message"
                             is-required="true"
                             read-only="@(Model.Data.IsSent && Model.Data.EmailId != Guid.Empty && Model.ErrorMessages == null)">
            </Custom:TextArea>

            <Custom:CheckBox id="IsSent"
                             label="Send"
                             is-checked="@Model.Data.IsSent"
                             value="@Model.Data.IsSent"
                             is-disabled="@(Model.Data.IsSent && Model.Data.EmailId != Guid.Empty)">
            </Custom:CheckBox>

            @if (Model.Data.IsSent && Model.Data.EmailId != Guid.Empty)
            {
                <Custom:TextBox id="SentDate"
                                label="Date and Time Sent"
                                type="text"
                                value="@((Model.Data.SentDate ?? DateTime.Now))"
                                placeholder=""
                                is-required="true"
                                is-disabled="true">
                </Custom:TextBox>
            }

        </Custom:Form>
    </div>
</div>
<script>
    let editorInstance;

    ClassicEditor
        .create(document.querySelector('#Message'))
        .then(editor => {
            editorInstance = editor;
        });

    function getEditorValue() {
        console.log(editorInstance.getData());
    }
</script>

@if (!(Model.Data.IsSent && Model.Data.EmailId != Guid.Empty && Model.ErrorMessages == null))
{
    
    <script>
        const recipientsInput = document.getElementById('Recipients');
        const selectAll = document.getElementById('selectAll');
        const recipientCheckboxes = document.querySelectorAll('.recipient');

        // Update textbox with selected emails
        function updateRecipientsTextbox() {
          let selected = [...recipientCheckboxes].filter(c => c.checked).map(c => c.value);
          recipientsInput.value = selected.join('; '); // use ; separator for emails
        }

        // Select All toggle
        selectAll.addEventListener('change', function () {
          recipientCheckboxes.forEach(c => c.checked = this.checked);
          updateRecipientsTextbox();
        });

        // Handle individual selections
        recipientCheckboxes.forEach(c => {
          c.addEventListener('change', function () {
            // Sync select all checkbox
            let total = recipientCheckboxes.length;
            let checked = document.querySelectorAll('.recipient:checked').length;
            selectAll.checked = (total === checked);

            updateRecipientsTextbox();
          });
        });
    </script>
}